#include <time.h>
double finfunc(int fun, double v1, double v2, double v3);
char * dostindex(int minr, int minc, int maxr, int maxc, struct enode * val);
double doindex(int minr, int minc, int maxr, int maxc, struct enode * val);
double dolookup(struct enode * val, int minr, int minc, int maxr, int maxc, int offset, int vflag);
double docount(int minr, int minc, int maxr, int maxc, struct enode * e);
double dosum(int minr, int minc, int maxr, int maxc, struct enode * e);
double doprod(int minr, int minc, int maxr, int maxc, struct enode * e);
double doavg(int minr, int minc, int maxr, int maxc, struct enode * e);
double dostddev(int minr, int minc, int maxr, int maxc, struct enode * e);
double domax(int minr, int minc, int maxr, int maxc, struct enode * e);
double domin(int minr, int minc, int maxr, int maxc, struct enode * e);
double dodts(int e1, int e2, int e3);
double dotts(int hr, int min, int sec);
double dotime(int which, double when);
double doston(char * s);
int    doslen(char * s);
double doeqs(char * s1, char * s2);
struct ent * getent(char * colstr, double rowdoub);
double donval(char * colstr, double rowdoub);
double dolmax(struct enode * ep);
double dolmin(struct enode * ep);
//double eval(register struct enode *e);
double eval(register struct ent * ent, register struct enode * e);
double fn1_eval(double (* fn)(), double arg);
double fn2_eval(double (* fn)(), double arg1, double arg2);
char * docat(register char * s1, register char * s2);
char * dodate(time_t tloc, char * fmtstr);
char * dofmt(char * fmtstr, double v);
char * doext(struct enode * se);
char * doext(struct enode * se);
char * dosval(char * colstr, double rowdoub);
char * dosubstr(char * s, register int v1, register int v2);
char * docase(int acase, char * s);
char * docapital(char * s);
char * seval(register struct ent * ent, register struct enode * se);
void setiterations(int i);
void EvalAll();
int RealEvalAll();
void RealEvalOne(register struct ent * p, int i, int j, int * chgct, int rebuild_graph);
struct enode * new(int op, struct enode * a1, struct enode * a2);
struct enode * new_var(int op, struct ent_ptr a1);
struct enode * new_range(int op, struct range_s a1);
struct enode * new_const(int op, double a1);
struct enode * new_str(char * s);
void copy(struct ent * dv1, struct ent * dv2, struct ent * v1, struct ent * v2);
void copydbuf(int deltar, int deltac);
void eraser(struct ent * v1, struct ent * v2);
void yankr(struct ent * v1, struct ent * v2);
void mover(struct ent * d, struct ent * v1, struct ent * v2);
void g_free();
void go_last();
void go_previous();
void moveto(int row, int col, int lastrow, int lastcol, int cornerrow, int cornercol);
void num_search(double n, int firstrow, int firstcol, int lastrow, int lastcol, int errsearch, int flow);
void str_search(char * s, int firstrow, int firstcol, int lastrow, int lastcol, int num, int flow);
void fill(struct ent * v1, struct ent * v2, double start, double inc);
void lock_cells(struct ent * v1, struct ent * v2);
void unlock_cells(struct ent * v1, struct ent * v2);
void let(struct ent * v, struct enode * e);
void slet(struct ent * v, struct enode * se, int flushdir);
void format_cell(struct ent * v1, struct ent * v2, char * s);
int constant(register struct enode * e);
void efree(struct enode * e);
void label(register struct ent * v, register char * s, int flushdir);
void decodev(struct ent_ptr v);
char * coltoa(int col);
//static void decompile_list(struct enode * p);
void decompile(register struct enode * e, int priority);
void index_arg(char * s, struct enode * e);
void two_arg_index(char * s, struct enode * e);
void list_arg(char * s, struct enode * e);
void one_arg(char * s, struct enode * e);
void two_arg(char * s, struct enode * e);
void three_arg(char * s, struct enode * e);
void range_arg(char * s, struct enode * e);
void editfmt(int row, int col);
void editv(int row, int col);
void editexp(int row, int col);
void edits(int row, int col, int saveinfile);
int dateformat(struct ent * v1, struct ent * v2, char * fmt);
double rint(double d);

void EvalAllVertexs();
void EvalJustOneVertex(register struct ent * p, int i, int j, int rebuild_graph);
